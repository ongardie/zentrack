<?{

  /**
   * This file contains an example user plugin.
   *
   * User plugins allow you to place arbitrary code into the zentrack system
   * for user with user defined actions.  This could be a security risk if
   * your code is not well written, so USE WITH CAUTION AND CARE!
   *
   * This method may be included in any user defined action by simply adding
   * an action step with the type "User Fxn" and the name "example".
   *
   * Be sure to generate the correct param (in this case, a single boolean value)!
   *
   * You may create plugins as desired by simply following this example.  The key
   * points to remember are:
   * <ol>
   *   <li>The filename must be plugin.functionName.php
   *   <li>The function name must be usr_fxn_functionName
   *   <li>The function arguments are standard, they cannot be changed (see the example below)
   * </ol>
   *
   * The arguments provided to this method ($args) are generated when the action is
   * created, and can represent any values needed by the function.  Functions
   * should take proper care to validate that the needed variables are present
   * and usable.
   *
   * In addition to the user defined args, the following standard arguments will
   * be provided to each function call:
   * <ul>
   *   <li>action - (ZenAction) the action object calling this method
   *   <li>args - (array) generated by action, this contains any values you need to run your function
   *   <li>ticket_id - (integer) the ticket, if any, being manipulated (used to create a {@link ZenTicket} instance)
   *   <li>previous_step - (mixed) the return value of the previous action step, if any
   * </ul>
   *
   * The function contained in this file can contain any valid php code and can theoretically
   * access any functions from the api (if you know how to use them).  The static functions
   * should be relatively easy to use.  It is designed specifically to be used with the class objects
   * linked below (in the "see" values)
   * 
   * Consult the documentation on user defined functions for more information.
   *
   * @see Zen - system functions
   * @see ZenUtils - utilities and tools
   * @see ZenQuery - constructing db queries, retrieve with {@link Zen::getNewQuery()}
   * @see ZenTicket - ticket information and functions
   * @see ZenUser - user information and functions
   * @see ZenLog - log information and functions
   * @package Plugins
   */

  /**
   * our example function takes an argument in $args (which should be generated by
   * the action calling this plugin) called 'bribe' which tells us how much cash
   * our developers have given to the testing team to pass their new product.
   * It then determines if our ticket should be rejected or approved and
   * returns a value to our action which serves no real purpose (maybe we would print
   * it to the screen).
   * 
   * Note that the parameters provided here are standard to all plugins.  Your
   * plugin should accept the same arguments, without exception.
   *
   * @param ZenAction $action the action which is running when this method is called
   * @param array $args the generated arguments defined in the action
   * @param integer $ticket_id the id of the ticket this action effects (if any)
   * @param mixed $previous_step is the return value from the previous step executed (if any)
   *
   * @package Plugins
   */
  function usr_fxn_example( $action, $args, $ticket_id = null, $previous_step = null ) {
    if( $args['bribe') > 500 ) { 
      //five hundred bucks should be enough
      return $action->name().' is approved';
    }
    else {
      //insufficient bribe, reject it
      return $action->name().' is denied';
    }
  }

}?>