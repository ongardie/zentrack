<?
  /**
   * This class contains user methods which may be dynamically created
   * for use in actions.  USE WITH CAUTION AND CARE!
   *
   * Any method declared here can be used as an argument or as a process
   * in an Action by selecting the source type "User Function" and 
   * entering the name of the corresponding method located here.
   *
   * Be sure to pass the correct arguments for your method!
   *
   * The method's name MUST BE prefixed with "usr_fxn_" to avoid ambiguity
   * and possible conflict with system/zen functions.
   *
   * Example usage:
   * <code>
   * // our example function takes an argument (generated by the action we
   * // have presumably defined) called 'bribe' which tells us how much cash
   * // our developers have given to the testing team to pass their new product.
   * // It then determines if our ticket should be rejected or approved and
   * // returns a value to our action which can be inserted into the database.
   * 
   * function usr_fxn_approval_value( $args ) {
   *   if( $args['bribe') > 500 ) { 
   *     //five hundred bucks should be enough
   *     return 'Approved';
   *   }
   *   else {
   *     //insufficient bribe, reject it
   *     return 'Denied';
   *   }
   * }
   * </code>
   *
   * The arguments provided to this method are generated when the action is
   * created, and can represent any values needed by the function.  Functions
   * should take proper care to validate that the needed variables are present
   * and usable.
   *
   * In addition to the user defined args, the following standard arguments will
   * be provided to each function call:
   * <ul>
   *   <li>action - (ZenAction) the action object calling this method
   *   <li>user_id - (integer) the logged in user's id, can be used to create a {@link ZenUser} object
   *   <li>ticket_id - (integer) the ticket being manipulated, can be used to create a {@link ZenTicket} object
   * </ul>
   *
   * Note that any valid functions from the ZenTrack API or php core system 
   * could theoretically be used in these methods.  The static methods 
   * should be accessible under most conditions.  Any valid php code can be put into
   * this method.
   *
   * USE WITH CAUTION AND CARE!
   *
   * This file, once created, will never be modified by the ZenTrack system.
   * (unless you do a "full_install", overwriting this installation!).  It
   * can be backed up by calling install.php with the -backup_config  or
   * -backup_all target.
   * 
   * Consult the documentation on user defined functions for more information.
   *
   * @see Zen - system functions
   * @see ZenUtils - utilities and tools
   * @see ZenQuery - constructing db queries, retrieve with {@link Zen::getNewQuery()}
   * @see ZenTicket - ticket information and functions
   * @see ZenUser - user information and functions
   * @see ZenLog - log information and functions
   * @package User
   */





?>
