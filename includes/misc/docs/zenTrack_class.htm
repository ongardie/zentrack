<html>
<head>
<title>Reflection Test</title>
<LINK REL=StyleSheet HREF="stylesheet.css" TYPE="text/css">
</head>              
<body bgcolor='#FFFFFF' text='#000000' link='#000066' vlink='#006666'>
<a name='top'></a>
<ul>
  <table bgcolor='#EEEEEE' width=600>
  <tr>
    <td colspan=4 class=titleCell>
       Pick a Script to Analyze
    </td>
  </tr>
  <tr>
   <td><b>Script:</b></td>
   <form method=post action='/reflectTest/reflectTest.php'>
   <td colspan=3>/web/phpzen/sub/devtrack/&nbsp;<input type=text name='file' size=50 maxlength=500 value='includes/zenTrack.class'></td>
  </tr>
  <tr>
    <td><b>Type:</b></td>
    <td colspan=3>
       <select name=type>
<option SELECTED>PHP</option><option>PERL</option><option>JSP</option>       </select>
    </td>
  </tr>
  <tr>
   <td>
     Show:
   </td>
   <td>
     <input type=checkbox name=s_d CHECKED>&nbsp;Details
     <br>
     <input type=checkbox name=s_s >&nbsp;Sessions
     <br>
     <input type=checkbox name=s_g >&nbsp;Globals
   </td>
   <td valign=top>
     <input type=checkbox name=s_i CHECKED>&nbsp;Includes
     <br>
     <input type=checkbox name=s_f CHECKED>&nbsp;Functions
   </td>
   <td valign=top>
     <input type=checkbox name=s_sys >&nbsp;Syscalls
     <br>
     <input type=checkbox name=s_v >&nbsp;Vars
   </td>
  </tr>
  <tr>
    <td colspan=4 class='titleCell'><input type=submit value='View'></td>
  </tr>
  </form>
  </table>
  <a href='/reflectTest/reflectTest.php?hlp=1&file=/reflectTest/reflectTest.php'>Help</a>&nbsp;&nbsp;<a href='/reflectTest/reflectTest.php'>Reset</a>
</ul>
     &nbsp;<P>
     <b><font size=4 color="#000099">includes/zenTrack.class</font></b>
     </p>
     <P>
     <a href='#details'>Details</a>&nbsp;|&nbsp;<a href='#includes'>Includes</a>&nbsp;|&nbsp;<a href='#functions'>Functions</a>&nbsp;|&nbsp;<a href='/reflectTest/reflectTest.php?src=1&file=includes/zenTrack.class&s_s=&s_g=&s_i=on&s_f=on&s_sys=&s_d=on&s_v='>Show Source</a>
 
     
                                               
       </p><P>&nbsp;<a name='details'></a>
       <P>
       <hr align=left width=400 color='teal'>
       <b>Page Details</b>
       <hr align=left width=400 color='teal'>
       <ul>
       Version: See CVS Repository for version information<br>
Modified: 02/22/21<br>
Author: Kato &quot;PHPzen&quot;<br>
Contact: <a href='mailto:postmaster@phpzen.net'>postmaster@phpzen.net</a><br>Website: <a href='http://www.phpzen.net'>http://www.phpzen.net</a><P><i>
<br>
zenTrack Class<br>
Description: Ticketing system functions<br>
This is the main class containing all of the functionality for use<br>
with the zentrack system.  This class extends zen (basic text formatting<br>
and page utilities), zenDate (date manipulations and calculations) and<br>
db.class (database access and retrieval)<br>
</i>
 
      </ul>
       <P><a href='#top'>top</a><P>&nbsp;<a name='includes'></a>
      
       
       
       <hr align=left width=400 color='teal'>
       <b>Included Files</b>
       <hr align=left width=400 color='teal'>
       <ul>
       <div style='padding-left:10px'>
<a href='/reflectTest/reflectTest.php?file=/web/phpzen/sub/devtrack/includes/zen.class&type=CLASS&s_s=&s_g=&s_i=on&s_f=on&s_sys=&s_d=on&s_v='>zen.class</a><div style='padding-left:10px'>
<a href='/reflectTest/reflectTest.php?file=/web/phpzen/sub/devtrack/includes/zenDate.class&type=CLASS&s_s=&s_g=&s_i=on&s_f=on&s_sys=&s_d=on&s_v='>zenDate.class</a><div style='padding-left:10px'>
<a href='/reflectTest/reflectTest.php?file=/web/phpzen/sub/devtrack/includes/db.class&type=CLASS&s_s=&s_g=&s_i=on&s_f=on&s_sys=&s_d=on&s_v='>db.class</a>
</div>
</div>
$file <font color='#999999'>(File not found/File empty)</font></div>
       </ul>
       <P><a href='#top'>top</a><P>&nbsp;<a name='sessions'></a>
       
           	
	    <hr align=left width=400 color='teal'>
	    <b>Functions:</b>
	    <hr align=left width=400 color='teal'>
	    <ul>
	    <table bgcolor='#EEEEEE' width=600><tr><td class="titleCell">Name</td><td class='titleCell'>Parameters</td><td class='titleCell'>Line</td><td class='titleCell'>Comments</td></tr>
<tr><td colspan=4 class='subTitle'>A</td></tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>accept_ticket</td><td class='valueCell' valign=top>
id<br>userID<br>comments = ''<br>binID = ''</td><td class='lineCell' valign=top>359</td><td class='commentCell' valign=top>changes the tickets userID to reflect
<br>a new owner for the ticket
<br>logs this in the db if settings[&quot;log_accept&quot;] = &quot;On&quot;;
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>actionApplicable</td><td class='valueCell' valign=top>
id<br>action<br>userID = ''</td><td class='lineCell' valign=top>1704</td><td class='commentCell' valign=top>check to see if an action is applicable to
<br>the current ticket, based on it's status, the
<br>logged in users access, and the actions requirements
<br>if an array is sent in place of the ticket id, it will
<br>be used as the tickets parameters (saving a db lookup)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>add_access</td><td class='valueCell' valign=top>
uid<br>params</td><td class='lineCell' valign=top>1029</td><td class='commentCell' valign=top>adds new access parameters for the
<br>given user, ignores ones that
<br>currently exist for that user
<br>$params is an indexed array containing:
<br>&quot;binID&quot; =&gt; level (integer)
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>add_attachment</td><td class='valueCell' valign=top>
name<br>filename<br>filetype<br>ticketID<br>logID = ''<br>description = ''</td><td class='lineCell' valign=top>922</td><td class='commentCell' valign=top>adds an attachment to the db for tracking
<br>does not add the actual file, just it's associations
<br>with logs and tickets, logID is optional, the ticketID is not
<br>filetype represents the complete mime type as will be used
<br>to supply the file back to the user when requested
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>add_bin</td><td class='valueCell' valign=top>
params</td><td class='lineCell' valign=top>1121</td><td class='commentCell' valign=top>add a new bin to the bins table
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>add_log</td><td class='valueCell' valign=top>
id<br>params</td><td class='lineCell' valign=top>837</td><td class='commentCell' valign=top>add a new log entry for ticket
<br>with $id
<br>params can include any of the
<br>following indexes:
<br>userID
<br>binID
<br>action (the action logged)
<br>entry (the log entry)
<br>ticketID
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>add_prefs</td><td class='valueCell' valign=top>
uid<br>params</td><td class='lineCell' valign=top>1074</td><td class='commentCell' valign=top>adds prefs for a uid
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>add_project</td><td class='valueCell' valign=top>
params</td><td class='lineCell' valign=top>285</td><td class='commentCell' valign=top>create a new project with the given params
<br>(abstracted from add_ticket() to allow
<br>for custom functionality)
<br>all dates are to be sent as unix timestamps
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>add_setting</td><td class='valueCell' valign=top>
params</td><td class='lineCell' valign=top>1097</td><td class='commentCell' valign=top>add a new setting into the db
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>add_system</td><td class='valueCell' valign=top>
params</td><td class='lineCell' valign=top>1144</td><td class='commentCell' valign=top>add a new system to the db
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>add_ticket</td><td class='valueCell' valign=top>
params</td><td class='lineCell' valign=top>785</td><td class='commentCell' valign=top>create a new ticket with the
<br>given params and return the new
<br>insert ID for that ticket
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>add_translation_string</td><td class='valueCell' valign=top>
identifier<br>string<br>language</td><td class='lineCell' valign=top>1635</td><td class='commentCell' valign=top>add a new string to the pre-made sentences for translations
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>add_translation_word</td><td class='valueCell' valign=top>
identifier<br>translation<br>language</td><td class='lineCell' valign=top>1628</td><td class='commentCell' valign=top>add a new word to the translations dictionary
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>add_type</td><td class='valueCell' valign=top>
params</td><td class='lineCell' valign=top>1169</td><td class='commentCell' valign=top>add a new ticket type
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>add_user</td><td class='valueCell' valign=top>
params</td><td class='lineCell' valign=top>982</td><td class='commentCell' valign=top>creates a new user entry in the db
<br>if $params[&quot;access&quot;] is an array
<br>then it will also run add_access()
<br>with this array once the user has
<br>been created
<br>if [&quot;password&quot;] is given, it should
<br>be the unencrypted value.. if blank,
<br>[&quot;password&quot;] will be set automatically
<br>to the users last name until that user
<br>logs into the system and changes it
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>approve_ticket</td><td class='valueCell' valign=top>
id<br>userID<br>comments = ''</td><td class='lineCell' valign=top>384</td><td class='commentCell' valign=top>changes the approval status to 2 for the ticket
<br>if the ticket is ready for closure, then this function
<br>will also close out the ticket
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>archive_log</td><td class='valueCell' valign=top>
id<br>flag = 0</td><td class='lineCell' valign=top>899</td><td class='commentCell' valign=top>moves logs for ticket with $id to the
<br>db archives.  if $flag = 1, then moves
<br>only logs with an lid(log id) matching $id
<br>instead of by ticketID
<br>attachments are deleted from the db
<br>when a ticket is archived
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>archive_project</td><td class='valueCell' valign=top>
pid</td><td class='lineCell' valign=top>316</td><td class='commentCell' valign=top>send a project to the archives
<br>and all of it's related tickets and logs
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>archive_ticket</td><td class='valueCell' valign=top>
id</td><td class='lineCell' valign=top>793</td><td class='commentCell' valign=top>send a ticket and all of it's log
<br>entries to the archive db
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>assign_ticket</td><td class='valueCell' valign=top>
id<br>recipient<br>userID = ''<br>comments = ''</td><td class='lineCell' valign=top>409</td><td class='commentCell' valign=top>set the userID for the ticket to another person
<br>the recipient recieves the ticket, the userID is for the
<br>sender
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>attach_to_ticket</td><td class='valueCell' valign=top>
id<br>userID<br>params<br>logID = ''</td><td class='lineCell' valign=top>440</td><td class='commentCell' valign=top>creates an attachment to the given ticket and logs
<br>the event if needed
<br>the params array contains:
<br>name         - name of the file to display
<br>filename     - name of file on system
<br>filetype     - mime type (i.e. image/gif)
<br>description  - [optional] comments about the file for display
</td>
</tr>
<tr><td colspan=4 class='subTitle'>C</td></tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>checkAccess</td><td class='valueCell' valign=top>
uid<br>binID<br>action = ''</td><td class='lineCell' valign=top>1673</td><td class='commentCell' valign=top>takes the userID, the binID and the action in
<br>question, and determines whether the logged in
<br>user can perform it
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>checkRelations</td><td class='valueCell' valign=top>
relations</td><td class='lineCell' valign=top>1810</td><td class='commentCell' valign=top>takes either an array or comma delimited
<br>string.  insures that the tickets to be
<br>related actually exist and returns only
<br>the ids that are in db
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>check_bin_access</td><td class='valueCell' valign=top>
uid<br>binID<br>level = 1</td><td class='lineCell' valign=top>1210</td><td class='commentCell' valign=top>check the user's access priviledges for the given binID
<br>based on the users uid. and $level (returns true
<br>if equal to or greater than this)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>check_status</td><td class='valueCell' valign=top>
id<br>code = 'OPEN'</td><td class='lineCell' valign=top>1225</td><td class='commentCell' valign=top>checks to see if a ticket is ready for the
<br>given action, the $code codes are:
<br>OPEN    - is open?
<br>PEND    - is pending?
<br>TEST    - ready for testing?
<br>APPR    - ready for approval?
<br>READY   - ready for closing?
<br>CLOSED  - is closed?
<br>returns 1 if $code can be met
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>close_project</td><td class='valueCell' valign=top>
pid<br>params = ''<br>override = 0</td><td class='lineCell' valign=top>334</td><td class='commentCell' valign=top>sets the status of a project to 'CLOSED' assuming
<br>that the project doesn't require testing and approval
<br>and that all children are closed (otherwise will skip)
<br>if $override is passed, then this method will
<br>close a project, even if testing or approval are
<br>required, or there are open children.
<br>$params is an array passed on to the log function
<br>(userID, comments)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>close_ticket</td><td class='valueCell' valign=top>
id<br>userID = ''<br>hours = ''<br>comments = ''</td><td class='lineCell' valign=top>467</td><td class='commentCell' valign=top>closes the ticket (sets the status to CLOSED)
<br>if there is testing or approval yet required, then
<br>simply sets status to pending.
<br>however, if both of these are completed, then
<br>closes out the ticket
</td>
</tr>
<tr><td colspan=4 class='subTitle'>D</td></tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>delete_access</td><td class='valueCell' valign=top>
id<br>flag = ''</td><td class='lineCell' valign=top>1054</td><td class='commentCell' valign=top>deletes access privedges based on $flag
<br>NULL - by userID
<br>1    - by binID
<br>2    - by aid
<br>$id can be an array
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>delete_all_attachments</td><td class='valueCell' valign=top>
id</td><td class='lineCell' valign=top>961</td><td class='commentCell' valign=top>deletes all attachments by their logID
<br>$id can be an array
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>delete_attachment</td><td class='valueCell' valign=top>
aid</td><td class='lineCell' valign=top>946</td><td class='commentCell' valign=top>deletes attachments by attachmentID
<br>can be an array
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>delete_bin</td><td class='valueCell' valign=top>
bid</td><td class='lineCell' valign=top>1127</td><td class='commentCell' valign=top>remove a bin by the bid (bin ID)
<br>bid can be an array
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>delete_log</td><td class='valueCell' valign=top>
id<br>flag = 0<br>archive_flag = 0</td><td class='lineCell' valign=top>871</td><td class='commentCell' valign=top>delete log entries for ticket with
<br>$id, if $flag = 1, then deletes only
<br>the entry with log_id of $id (i.e. by the
<br>log id instead of ticket id)
<br>id can be a string or an array
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>delete_prefs</td><td class='valueCell' valign=top>
uid</td><td class='lineCell' valign=top>1083</td><td class='commentCell' valign=top>deletes prefs entries by uid
<br>uid can be an array
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>delete_project</td><td class='valueCell' valign=top>
pid<br>archive_flag = 0</td><td class='lineCell' valign=top>297</td><td class='commentCell' valign=top>drop project, all associated tickets
<br>all log entries of those tickets, and
<br>all their data from the db
<br>if $archive_flag = 1, then deletes from the
<br>archive table
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>delete_setting</td><td class='valueCell' valign=top>
setID</td><td class='lineCell' valign=top>1103</td><td class='commentCell' valign=top>remove a setting based on it's setID
<br>setID can be an array
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>delete_system</td><td class='valueCell' valign=top>
sid</td><td class='lineCell' valign=top>1150</td><td class='commentCell' valign=top>delete a system from the db via the
<br>sid (systemID)
<br>$sid can be an array
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>delete_ticket</td><td class='valueCell' valign=top>
id<br>archive_flag = 0</td><td class='lineCell' valign=top>810</td><td class='commentCell' valign=top>drop a ticket, its log entries, and
<br>all associated data from the db
<br>$id can be an array
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>delete_type</td><td class='valueCell' valign=top>
typeID</td><td class='lineCell' valign=top>1175</td><td class='commentCell' valign=top>delete a ticket type by
<br>the typeID (can be an array)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>delete_user</td><td class='valueCell' valign=top>
uid</td><td class='lineCell' valign=top>1009</td><td class='commentCell' valign=top>deletes a user from the db by the
<br>user's id.  also deletes all access
<br>and prefs entries for this user
<br>$uid can be an array
</td>
</tr>
<tr><td colspan=4 class='subTitle'>F</td></tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>fetch_bin_roles</td><td class='valueCell' valign=top>
binID<br>role = ''</td><td class='lineCell' valign=top>1260</td><td class='commentCell' valign=top>fetches members of bin with a particular
<br>role.  If $role is given, fetches only
<br>members listed as fulfilling that particular
<br>role. Returns the userID and their role in an
<br>indexed array
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>fetch_user_roles</td><td class='valueCell' valign=top>
userID<br>binID = ''</td><td class='lineCell' valign=top>1273</td><td class='commentCell' valign=top>fetches a specific user's roles in zenTrack
<br>if binID is given, returns only roles for that specific bin
<br>returns the binID and role in an indexed array
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>formatEmailMessage</td><td class='valueCell' valign=top>
params</td><td class='lineCell' valign=top>1321</td><td class='commentCell' valign=top>takes a list of input parameters and makes
<br>a formatted message to be sent, including links
<br>and information about the ticket referenced
<br>special params:
<br>message - printed at the top of the email with
<br>line breaks afterwards
<br>body    - printed with extra line breaks
<br>tid     - retrieves the ticket by this id and
<br>includes it in the email body
<br>log     - retrieves log entries for this ticket
<br>by the id given by log, limited by the
<br>system setting email_max_logs
<br>link    - displays a link to the ticket
<br>(this is done with the tid property too,
<br>use this one instead of tid to display
<br>the link only)
<br>all others are printed as is, with html stripped
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>formatName</td><td class='valueCell' valign=top>
uid<br>flag = ''</td><td class='lineCell' valign=top>1288</td><td class='commentCell' valign=top>if the user properties are available, pass those here
<br>otherwise pass the user id, and he/she will be retrieved
<br>from the db (user properties can be passed as an array in
<br>place of $id)
<br>if $flag = 2, then returns &quot;initials&quot;
<br>if $flag = 1, then returns &quot;lname, fname&quot;
<br>if !$flag, then returns &quot;fname lname&quot;
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>format_name</td><td class='valueCell' valign=top>
uid<br>flag = ''</td><td class='lineCell' valign=top>1283</td><td class='commentCell' valign=top>alias for formatName()
</td>
</tr>
<tr><td colspan=4 class='subTitle'>G</td></tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>getAccess</td><td class='valueCell' valign=top>
uid</td><td class='lineCell' valign=top>1665</td><td class='commentCell' valign=top>&nbsp;</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>getBins</td><td class='valueCell' valign=top>
flag = 0</td><td class='lineCell' valign=top>1789</td><td class='commentCell' valign=top>if flag is set, retrieves a full
<br>indexed array, otherwise, just
<br>a list of names, indexed by bid,
<br>ordered by priority and alphebetized
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>getPriorities</td><td class='valueCell' valign=top>
flag = 0</td><td class='lineCell' valign=top>1863</td><td class='commentCell' valign=top>if flag is set, retrieves all
<br>details in an unordered list
<br>otherwise, retrieves an indexed
<br>list sorted by priority
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>getProjectChildren</td><td class='valueCell' valign=top>
pid<br>columns = ''<br>archive_flag = 0</td><td class='lineCell' valign=top>1930</td><td class='commentCell' valign=top>returns array of tickets for the project by its pid ($pid)
<br>this is seperated from the get_tickets() for abstraction
<br>(i.e. future expansion compatability)
<br>the returned values of getProjectChildren() will always be
<br>unsorted if using $columns (sorry!)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>getProjectHours</td><td class='valueCell' valign=top>
pid<br>archive_flag = 0</td><td class='lineCell' valign=top>1943</td><td class='commentCell' valign=top>&nbsp;</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>getSettings</td><td class='valueCell' valign=top>
flag = 0</td><td class='lineCell' valign=top>1897</td><td class='commentCell' valign=top>pulls the variables from the settings table
<br>into an indexed array.
<br>if flag is set, then it retrieves all
<br>data for the settings into an array
<br>otherwise, just sets a string equal to the value
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>getStrings</td><td class='valueCell' valign=top>
language = ''<br>flag = 0</td><td class='lineCell' valign=top>1585</td><td class='commentCell' valign=top>returns an array of the translation strings
<br>improves efficiency by preventing multiple
<br>retrievals by storing results in a system var
<br>the first time this function is called
<br>$flag will override the default and reset these
<br>values
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>getSystems</td><td class='valueCell' valign=top>
</td><td class='lineCell' valign=top>1848</td><td class='commentCell' valign=top>if flag is set, retrieves an
<br>indexed array, otherwise, just
<br>a list of names ordered by priority
<br>and alphebetized
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>getTasks</td><td class='valueCell' valign=top>
</td><td class='lineCell' valign=top>1833</td><td class='commentCell' valign=top>if flag is set, retrieves an
<br>indexed array, otherwise, just
<br>a list of names ordered by priority
<br>and alphebetized
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>getTicketCount</td><td class='valueCell' valign=top>
status = ''<br>binID = ''</td><td class='lineCell' valign=top>1480</td><td class='commentCell' valign=top>counts the number of tickets matching
<br>binID and status (if provided) and returns
<br>the total
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>getTicketSender</td><td class='valueCell' valign=top>
id</td><td class='lineCell' valign=top>1960</td><td class='commentCell' valign=top>&nbsp;</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>getTypes</td><td class='valueCell' valign=top>
</td><td class='lineCell' valign=top>1915</td><td class='commentCell' valign=top>if flag is set, retrieves an
<br>indexed array, otherwise, just
<br>a list of names ordered by priority
<br>and alphebetized
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>getUser</td><td class='valueCell' valign=top>
uid</td><td class='lineCell' valign=top>1648</td><td class='commentCell' valign=top>retrieves the user who is logged in
<br>to zenTrack.  This function prevents
<br>multiple queries to retrieve user info
<br>on a single page by checking the stored
<br>user information and validating the uid
<br>first.
<br>Do not use this function for any data other
<br>than that of the logged in system user
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>getWords</td><td class='valueCell' valign=top>
words<br>language = ''</td><td class='lineCell' valign=top>1606</td><td class='commentCell' valign=top>this function fetches words from the db that are
<br>required for completing word translations
<br>to speed this process up greatly, this function can be called
<br>at the beginning of a page, with an array of words that will be
<br>used in that page, requiring only 1 database query for
<br>all uses of this execution
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>get_access</td><td class='valueCell' valign=top>
uid<br>flag = 0</td><td class='lineCell' valign=top>27</td><td class='commentCell' valign=top>retrieves the access priviledges
<br>by the uid (user id)
<br>if flag set to 1, then it returns
<br>a simple array containing all the columns
<br>( [0] = array(..all columns in db..) )
<br>otherwise, returns an array indexed by binID,
<br>with a value of the level for that bin
<br>( [&quot;binID&quot;] = $bin_level )
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>get_attachment</td><td class='valueCell' valign=top>
aid</td><td class='lineCell' valign=top>51</td><td class='commentCell' valign=top>retrieves all properties for a given attachment
<br>this is by the attachmentID and not the ticket or log ID
<br>and creates a file location to the actual
<br>attachment which is stored as [&quot;location&quot;]
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>get_attachments</td><td class='valueCell' valign=top>
id<br>flag = 0<br>indexed = 0</td><td class='lineCell' valign=top>65</td><td class='commentCell' valign=top>retrieves all attachements for a given ticketID
<br>indexed by log entry they are associated with
<br>if $flag = 1, retrieves by logID instead of ticketID
<br>if $indexed = 1, then retrieves in a complex array
<br>indexed by ticketID and logID as follows:
<br>$vals[&quot;ticket1&quot;][&quot;log1&quot;] = array(datarow)
<br>otherwise, returns in a simple, non-indexed array
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>get_log</td><td class='valueCell' valign=top>
lid</td><td class='lineCell' valign=top>92</td><td class='commentCell' valign=top>returns a specific logs data
<br>FROM &quot;.$this-&gt;table_logs.&quot; WHERE lid = $lid&quot;;
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>get_logs</td><td class='valueCell' valign=top>
id<br>sort = 'created DESC'<br>limit = ''</td><td class='lineCell' valign=top>98</td><td class='commentCell' valign=top>retrieve log entries for the given ticket id
<br>$limit specifies the max number to return
<br>FROM &quot;.$this-&gt;table_logs.&quot; WHERE ticketID = $id&quot;;
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>get_project</td><td class='valueCell' valign=top>
pid<br>archive_flag = 0</td><td class='lineCell' valign=top>109</td><td class='commentCell' valign=top>retrieves all properties from database for given
<br>project.  Also returns the following:
<br>children -  an array of tickets that belong to this project
<br>est_hours - is the estimated time for all tickets associated with
<br>this project
<br>wkd_hours - is the total hours worked on all tickets for this project
<br>percent_hours - is the percentage completion based on est_ and wkd_
<br>if $archive_flag = 1, then will look in archived tickets instead of
<br>active tickets table
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>get_projects</td><td class='valueCell' valign=top>
params<br>sort = 'priority<br>otime desc'<br>archive_flag =0</td><td class='lineCell' valign=top>128</td><td class='commentCell' valign=top>retrieves a list of projects
<br>see getTickets() for a list of valid params
<br>(with the exception of 'typeID' which is set to
<br>the id for projects)
<br>note that this does not return an accurate result
<br>for est_hours and wkd_hours.  Use getProjectHours()
<br>to determine these values
<br>if $archive_flag = 1, then retrieves from archive table
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>get_ticket</td><td class='valueCell' valign=top>
id<br>archive_flag = 0</td><td class='lineCell' valign=top>142</td><td class='commentCell' valign=top>retrieves the properties for a
<br>specific ticket by id
<br>use get_project() instead for projects
<br>to retreive accurate est_hours and wkd_hours relative
<br>to a project and all it's children
<br>$archive_flag retrieves tickets from archive db instead
<br>of the ticket db
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>get_tickets</td><td class='valueCell' valign=top>
params = ''<br>sort = 'priority<br>otime desc'<br>columns = ''<br>archive_flag = 0</td><td class='lineCell' valign=top>156</td><td class='commentCell' valign=top>retrieves a list of tickets
<br>$params can contain:
<br>bins  - string/array of bins to retrieve for
<br>users - string/array of users to retrieve for
<br>id    - an array of specific ticket ids to retrieve
<br>the default columns returned can be overriden by using $columns to
<br>specify what should be returned from this function.  Note that the
<br>sort must correspond to the $columns values for SQL compatibility
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>get_user</td><td class='valueCell' valign=top>
uid</td><td class='lineCell' valign=top>181</td><td class='commentCell' valign=top>returns a specific user
<br>by the user id
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>get_users</td><td class='valueCell' valign=top>
bins<br>params = ''<br>sort = 'lname<br>fname'</td><td class='lineCell' valign=top>189</td><td class='commentCell' valign=top>creates a list of users
<br>if $bins (array/string) is given
<br>then list will be only for users
<br>of given bins
</td>
</tr>
<tr><td colspan=4 class='subTitle'>L</td></tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>login_user</td><td class='valueCell' valign=top>
username<br>password</td><td class='lineCell' valign=top>1198</td><td class='commentCell' valign=top>perform a login check for username and password
<br>returns the user's uid
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>log_ticket</td><td class='valueCell' valign=top>
id<br>userID<br>action = 'LOG'<br>hours = ''<br>comments = ''</td><td class='lineCell' valign=top>550</td><td class='commentCell' valign=top>create an entry in the ticket log to track hours
<br>or work done
</td>
</tr>
<tr><td colspan=4 class='subTitle'>M</td></tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>move_ticket</td><td class='valueCell' valign=top>
id<br>newBin<br>userID = ''<br>comments = ''</td><td class='lineCell' valign=top>564</td><td class='commentCell' valign=top>moves the ticket to a new bin location
<br>if comments field is set to 'skip_log' then
<br>no log will be generated (assumed to have
<br>been done before calling this)
</td>
</tr>
<tr><td colspan=4 class='subTitle'>P</td></tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>percentWorked</td><td class='valueCell' valign=top>
etc = 0<br>wkd = 0</td><td class='lineCell' valign=top>1312</td><td class='commentCell' valign=top>determines the percent completion for this
<br>project
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>prn</td><td class='valueCell' valign=top>
words<br>language = ''<br>flag = 0</td><td class='lineCell' valign=top>1518</td><td class='commentCell' valign=top>take a string or array of words and
<br>return translated content (as much as possible)
<br>this is done by exploding the string on spaces
<br>replacing all occurences of words in brackets
<br>like such: [:identifier:] with their pre-fabbed
<br>constructs, and trying to translate all others
<br>from the word table
<br>if the language changes during execution, the
<br>flag will need to be set to insure they are
<br>refreshed
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>prnString</td><td class='valueCell' valign=top>
identifier<br>language = ''<br>flag = 0</td><td class='lineCell' valign=top>1504</td><td class='commentCell' valign=top>return a language string for printing
<br>from the pre-fabbed constructs
<br>if $flag is set, then the constructs will
<br>be reset
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>projectTypeID</td><td class='valueCell' valign=top>
</td><td class='lineCell' valign=top>1970</td><td class='commentCell' valign=top>returns the binID associated with projects
<br>this function prevents multiple calls for this
<br>id by storing it the first time it is called
</td>
</tr>
<tr><td colspan=4 class='subTitle'>R</td></tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>reject_ticket</td><td class='valueCell' valign=top>
id<br>userID<br>comments = ''</td><td class='lineCell' valign=top>606</td><td class='commentCell' valign=top>&nbsp;</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>relate_ticket</td><td class='valueCell' valign=top>
id<br>relations<br>userID = ''<br>comments = ''</td><td class='lineCell' valign=top>634</td><td class='commentCell' valign=top>takes either a comma delimited string
<br>or an array of ticket ids
<br>checks to insure they exist before performing
<br>relations
<br>THIS FUNCTION IS VERY INEFFICIENT AND NEEDS TO BE REVISED
<br>IT'S A HORRIBLE HACK FIX NOW, AND PROBABLY REQUIRES
<br>THE CREATION OF A NEW DB TABLE AND SOME EDITS
<br>TO THIS FUNCTION (possibly the addition of an addRelation()
<br>and dropRelation() method to encompass non-global updates)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>reopen_ticket</td><td class='valueCell' valign=top>
id<br>userID = 'NULL'<br>tested = 0<br>approved = 0<br>comments = ''</td><td class='lineCell' valign=top>682</td><td class='commentCell' valign=top>opens a ticket that has been closed
<br>this can be used to reopen tickets
<br>closed in error, or to make modifications
<br>to a closed ticket
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>report_compare</td><td class='valueCell' valign=top>
type<br>start<br>end</td><td class='lineCell' valign=top>2063</td><td class='commentCell' valign=top>will retrieve all actions, logs, tickets created, closed, etc
<br>based on one of the following parameters:
<br>bins
<br>types
<br>systems
<br>priorities
<br>users
<br>projects
<br>start and end times are required!
<br>$start is the oldest date to be retrieved (unix timestamp)
<br>$end is the newest date to be retrieved (unix timestamp)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>report_project</td><td class='valueCell' valign=top>
id<br>start = ''<br>end = ''</td><td class='lineCell' valign=top>2045</td><td class='commentCell' valign=top>will retrieve all tickets associated with project
<br>and actions conducted on project and produce an
<br>overall summary for the time period
<br>$start is the oldest date to be retrieved (unix timestamp)
<br>$end is the newest date to be retrieved (unix timestamp)
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>report_ticket</td><td class='valueCell' valign=top>
id<br>start = ''<br>end = ''</td><td class='lineCell' valign=top>2054</td><td class='commentCell' valign=top>will retrieve all actions and logs for this ticket,
<br>and produce a summary report for the given
<br>time period
<br>$start is the oldest date to be retrieved (unix timestamp)
<br>$end is the newest date to be retrieved (unix timestamp)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>report_user</td><td class='valueCell' valign=top>
uid<br>start = ''<br>end = ''</td><td class='lineCell' valign=top>2035</td><td class='commentCell' valign=top>will fetch all tickets assigned to this user
<br>all actions conducted by this user, and
<br>calculate summary report as well
<br>$start is the oldest date to be retrieved (unix timestamp)
<br>$end is the newest date to be retrieved (unix timestamp)
</td>
</tr>
<tr><td colspan=4 class='subTitle'>S</td></tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>search_logs</td><td class='valueCell' valign=top>
params<br>archive_flag = 0</td><td class='lineCell' valign=top>229</td><td class='commentCell' valign=top>search through log entries for given text
<br>params is an indexed array with two elements:
<br>$params[key][0] = LIKE, =, &gt;, &lt;, &gt;=, etc..
<br>$params[key][1] = '%value', '%value%', lower('value'), etc
<br>this function requires the values to be provided with single
<br>quotes and escape chars in place, they will not be added!
<br>if archive_flag = 1, then searches ticket archives as well
<br>if archive_flag = 2, then searches archives only
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>search_tickets</td><td class='valueCell' valign=top>
params<br>archive_flag = 0</td><td class='lineCell' valign=top>253</td><td class='commentCell' valign=top>search through tickets for given text
<br>acceptable params are:
<br>params is an indexed array with two elements:
<br>$params[key][0] = LIKE, =, &gt;, &lt;, &gt;=, etc..
<br>$params[key][1] = '%value', '%value%', lower('value'), etc
<br>this function requires the values to be provided with single
<br>quotes and escape chars in place, they will not be added!
<br>if archive_flag = 1, then searches ticket archives as well
<br>if archive_flag = 2, then searches archives only
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>sendEmail</td><td class='valueCell' valign=top>
recipients<br>subject<br>message<br>sender = ''<br>cc = ''</td><td class='lineCell' valign=top>1423</td><td class='commentCell' valign=top>send email updates to $recipients
<br>$recipients and $sender are the uid of the sender and recipient
<br>alternately, $recipients can contain valid email addresses rather
<br>than a uid value (to send to non-zentrack users)
<br>$recipients, $sender, and $cc can all be an array
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>statusHighlight</td><td class='valueCell' valign=top>
priority</td><td class='lineCell' valign=top>1883</td><td class='commentCell' valign=top>prints out status with proper &lt;span&gt;
<br>tags to highlight critical status items
</td>
</tr>
<tr><td colspan=4 class='subTitle'>T</td></tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>test_ticket</td><td class='valueCell' valign=top>
id<br>userID<br>hours = ''<br>comments = ''</td><td class='lineCell' valign=top>728</td><td class='commentCell' valign=top>updates the testing parameter to reflect
<br>a status of 'testing completed' for the ticket
</td>
</tr>
<tr><td colspan=4 class='subTitle'>U</td></tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>update_access</td><td class='valueCell' valign=top>
uid<br>params</td><td class='lineCell' valign=top>1045</td><td class='commentCell' valign=top>deletes the users old access privileges
<br>and replaces them with the ones given in
<br>$params, $uid is the userID
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>update_bin</td><td class='valueCell' valign=top>
bid<br>params</td><td class='lineCell' valign=top>1136</td><td class='commentCell' valign=top>update properties for a given bid (bin id)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>update_setting</td><td class='valueCell' valign=top>
setID<br>params</td><td class='lineCell' valign=top>1113</td><td class='commentCell' valign=top>update a setting based on it's setID
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>update_system</td><td class='valueCell' valign=top>
sid<br>params</td><td class='lineCell' valign=top>1160</td><td class='commentCell' valign=top>update settings for a given
<br>sid (systemID)
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>update_ticket</td><td class='valueCell' valign=top>
id<br>params</td><td class='lineCell' valign=top>822</td><td class='commentCell' valign=top>update properties of an existing
<br>tickets with given params
</td>
</tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>update_type</td><td class='valueCell' valign=top>
typeID<br>params</td><td class='lineCell' valign=top>1184</td><td class='commentCell' valign=top>update a ticket type by the typeID
</td>
</tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>update_user</td><td class='valueCell' valign=top>
uid<br>params</td><td class='lineCell' valign=top>1021</td><td class='commentCell' valign=top>updates user settings by uid
</td>
</tr>
<tr><td colspan=4 class='subTitle'>Y</td></tr>
<tr bgcolor='#DFDFDF'>
<td class='nameCell' valign=top>yank_ticket</td><td class='valueCell' valign=top>
id<br>userID<br>comments = ''</td><td class='lineCell' valign=top>752</td><td class='commentCell' valign=top>takes a ticket from it's current location and status
<br>(whatever those might be) and
<br>assigns it to the user specified
</td>
</tr>
<tr><td colspan=4 class='subTitle'>Z</td></tr>
<tr bgcolor='#FFFFFF'>
<td class='nameCell' valign=top>zenTrack</td><td class='valueCell' valign=top>
file<br>user = ''<br>language = ''</td><td class='lineCell' valign=top>1990</td><td class='commentCell' valign=top>$file is the configuration file
<br>containing all of the settings for
<br>zenTrack to use during operation
<br>$user is the logged in userid for this
<br>user.  If given, then the user will be retrieved
<br>and saved for use in other methods (to
<br>prevent multiple queries)
<br>if $language is given, it will override the value
<br>from the configVars file
</td>
</tr>
</table>
	    </ul>
	    <P><a href='#top'>top</a>&nbsp;<a name='vars'></a>
	    
	    
</body>
</html>
