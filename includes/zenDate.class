<?
  /*
  **
  **  zenDate Class
  **
  **  Author: phpZEN (Michael Richardson)
  **  Contact: postmaster@phpzen.net
  **  Version: 1.3
  **  
  **  USAGE NOTE:  On all methods where the $utime field is optional, the function 
  **  will use the current time instead, if not specified
  **
  **  This class works with dates by converting them to unix timestamps.  It can
  **  accurately parse an sql date (or create one), add, subtract, and track a given
  **  time, as well as find starting period for days, months, weeks, years and determine
  **  time elapsed over any of these ranges
  */

  include_once("$libDir/dbnew.class");
  
class zenDate extends DB {

   var $nowParts;
   var $now;
   var $currTime;

   var $dayOfWeek = array(   //indexed as 1-7 for retrieving day names
      "",
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
   );

   var $monthNames = array(   //indexed as 1-12 for retrieving month names
      "",
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
   );

   var $daysInMonth = array(  //indexed as 1-12 for retrieving days in each month
      0,
      31,
      28,
      31,
      30,
      31,
      30,
      31,
      31,
      30,
      31,
      30,
      31
   );

   function showDay( $utime = '' ) {
      // displays the day of the month
      // from a unix timestamp
      
      if( !$utime )
         $utime = $this->currTime;
      $dateParts = $this->dateSplit( $utime );
      return( $dateParts["mday"] );
   }

   function showWeekday( $utime = '', $flag = '' ) {
      // displays the day of the week from a unix timestamp
      // if $flag is an integer, truncates the weekday to the length
      // given by $flag
      
      if( !$utime )
         $utime = $this->currTime;
      $dateParts = $this->dateSplit( $utime );
      $day = $dateParts["weekday"];

      $weekday = (ereg("^[0-9]+$", $flag))? substr($day, 0, $flag) : $day;
      return($weekday);
   }
	
   function showWeekdayNum( $utime = '' ) {
      // returns the number (1-7) for the weekday
      // given by the unix timestamp $utime
      
      if( !$utime )
	$utime = $this->currTime;
      $dateParts = $this->dateSplit( $utime );
      return( $dateParts["wday"]+1 );
   }
	
   function showDayOfYear( $utime = '' ) {
      // returns day of the year (1-366)

      if( !$utime )
	$utime = $this->currTime;
      $dateParts = $this->dateSplit( $utime );
      $day = $dateParts["yday"];
      
      return($day);
   }
	
   function showWeekNum( $utime = '' ) {
      // returns the week of the year (1-53)
      
      $day = $this->showDayOfYear( $utime );
      return( intval($day / 7) );
   }
   
   function showMonth( $utime = '', $flag = '' ) {
      // displays the name of the month
      // if $flag, then truncates the length to that specified
      // by $flag
      
      if( !$utime )
	$utime = $this->currTime;
      $dateParts = $this->dateSplit( $utime );
      $month = $dateParts["month"];
      
      $m = (ereg("^[0-9]+$", $flag))? substr($month, 0, $flag) : $month;
      return($m);
   }
	
   function showMonthNum( $utime = '' ) {
      // returns the number of the month (1-12)
      
      if( !$utime )
	$utime = $this->currTime;
      $dateParts = $this->dateSplit( $utime );
      return( $dateParts["mon"] );
   }

   function showYear( $utime = '', $flag = '' ) {
      // returns the year
      // if $flag, truncates to length of $flag (from the right)
      
      if( !$utime )
         $utime = $this->currTime;
      $dateParts = $this->dateSplit( $utime );
      $day = $dateParts["year"];

      $yday = (ereg("^[0-9]+$", $flag))? substr($day, (4-$flag), $flag) : $day;
      return($yday);
   }

   function showDate( $utime = '', $flag = '' ) {
      // displays the date, either as mm/dd/yy (flag != 4)
      // or as mm/dd/YYYY (flag = 4)
      
      if( !$utime )
         $utime = $this->currTime;
      $newtime = (ereg("4",$flag))? strftime("%m/%d/%Y", $utime) : strftime("%D", $utime);
      return( $newtime );
   }

   function showTime( $utime = '', $flag = '' ) {
      // displays the time either as military time (flag contains an M)
      // or am/pm format (flag does not contain an M)
      
      if( !$utime )
         $utime = $this->currTime;
      $newtime = (ereg("M",$flag))? strftime("%H:%M", $utime) : strftime("%I:%M %p", $utime);
      return( $newtime );
   }
   
   function showHour( $utime = '', $flag = '' ) {
      // displays the hour only either as 0-23 (flag contains an M)
      // or 1-12 (flag not contain an M)
      if( !$utime )
	$utime = $this->currTime;
      $newtime = (eregi("M",$flag))? date("H", $utime) : date("I p", $utime);
      return $newtime;
   }
   
   function showDateTime( $utime = '', $flag = '' ) {
      // display the date and time with the same options as both
      // showDate() and showTime()... i.e. if the flag were set 
      // to 'M4' it would show a 4 digit year, and 24 hour notation
      // if flag set to M, it would show 24 hour notation and
      // 2 digit year
      
      if( !$utime )
	$utime = $this->currTime;
      if( ereg("4", $flag ) )
	$newtime = (ereg("M",$flag))? strftime("%m/%d/%Y %H:%M", $utime) : strftime("%m/%d/%y %I:%M %p", $utime);
      else
	$newtime = (ereg("M", $flag))? strftime("%D %H:%M", $utime) : strftime("%D %I:%M %p", $utime);
      return( $newtime );
   }

   function showLongDate( $utime = '', $flag = '' ) {
      // displays the full text date
      // if $flag contains an integer, 
      // month and weekday are abbreviated
      
      if( !$utime )
	$utime = $this->currTime;
      $newtime = ($flag)? strftime("%a, %b %e, %Y", $utime) : strftime("%A, %B %e, %Y", $utime);
      return( $newtime );
   }
   
   function showLongTime( $utime = '', $flag = '' ) {
      // displays the time with seconds and time zone formatting
      // if $flag contains 'M' then the time returned will be in 24 hour notation
      
      if( !$utime )
	$utime = $this->currTime;
      $newtime = (ereg("M",$flag))? strftime("%H:%M:%S %Z", $utime) : strftime("%I:%M:%S %p %Z", $utime);
      return( $newtime );
   }
   
   function showLongDateTime( $utime = '', $flag = '' ) {
      // uses the same options as showLongDate() and showLongTime()
    
      if( !$utime )
	$utime = $this->currTime;
      if( ereg("M", $flag) )
         $newtime = (ereg("[0-9]",$flag))? strftime("%H:%M:%S %a, %b %e, %Y", $utime) : strftime("%H:%M:%s %A, %B %e, %Y", $utime);
      else
	$newtime = ($flag)? strftime("%I:%M:%S %a, %b %e, %Y", $utime) : strftime("%I:%M:%S %p, %A, %B %e, %Y", $utime);
      return( $newtime );
   }
   
   function get_monthName( $num ) {
      // returns the name of the specified
      // month number
      
      while( $num > 12 ) { $num -= 12; }
      while( $num < 1 ) { $num += 12; }
      return( $this->monthNames[$num] );
   }
   
   function get_dayOfWeek( $num ) {
      // returns the name of the specified
      // weekday
      
      while( $num > 7 ) { $num -= 7; }
      while( $num < 1 ) { $num += 7; }
      return( $this->dayOfWeek[$num] );
   }
   
   function get_daysInMonth( $num, $flag = '' ) {
      // returns the number of days in the given month
      // $flag indicates that the year is divible by 4
      // (i.e. it's a leap year) and there are 29 days
      // in February
      
     while( $num > 12 ) { $num -= 12; }
     while( $num < 1 ) { $num += 12; }
     if( $flag && $num == 2 )
	return(29);
     else
	return( $this->daysInMonth[$num] );     
   }
   
   function daysInMonth($utime) {
      // returns the number of days in the month
      // of the given unix timestamp (as opposed to the month
      // number, as with get_daysInMonth() )
      // this will determine the year, and account for
      // leap year as well
      
      if( !$utime )
	$utime = $this->currTime;
      $flag = ($this->showYear($utime)%4 == 0);
      $month = $this->showMonthNum($utime);
      return ($this->get_daysInMonth( $month, $flag));
   }
   
   function get_WeekdaysInMonth( $weekday, $utime = '' ) {
      // returns an array containing the days of the 
      // month that $weekday (integer 1-7) falls on

      if( !$utime )
	$utime = $this->currTime;
      $curr = $this->dateAnchor('month', $utime);
      $daysInMonth = $this->daysInMonth($utime);
      $month = $this->showMonthNum($utime);
      $i = 0;
      while( strtolower(substr($weekday,0,3)) != strtolower(substr($this->showWeekday($curr),0,3)) ) {
	 $curr = $this->dateAdjust( 1, 'day', $curr );
	 $i++;
	 if( $i > 14 ) {
	   return; //prevent infinite loop on event that user passes incorrect weekday
	 }
      }
      while( $this->showDay($curr) <= $daysInMonth  && $this->showMonthNum($curr) == $month ) {
	 $days[] = $this->showDay($curr);
	 $curr = $this->dateAdjust( 7, 'days', $curr );
      }
      return($days);
   }
   
   function secondsIn( $measure, $num = 1 ) {
      // returns the number of seconds
      // (for unix timestamp conversions) in
      // another measure of time (such as minutes
      // or hours)
      
      switch( strtolower(substr($measure,0,3)) ) {
	case "min":
	 $conv = 60 * $num;
	 break;
	case "hou":
	 $conv = 3600 * $num;
	 break;
	case "day":
	 $conv = 86400 * $num;
	 break;
	case "wee":
	 $conv = 604800 * $num;
	 break;
	case "mon":
	 $conv = 365 / 12 * $num;
	 break;
	case "yea":
	 $conv = 31536000 * $num;
	 break;
	default:
	 $conv = 1 * $num;
	 break;
      }			 
      return $conv;
   }
   
   function dateDiff( $end = '', $start = '', $measure = 'seconds', $marker = '' ) {
      // returns the difference in time between two dates
      // where:
      //    $end - end date
      //    $start - starting date
      //    $measure - units to return diff in (seconds, minutes, hours, etc)
      //    $marker - a variable name to store this difference in
      //              this is a variable on the calling page (globalized)
      //              and is used for marking times during script execution
      
      if( !$end )
	$end = $this->currTime;
      if( !$start )
	$start = $this->now;
      $val = (( $end - $start ) / $this->secondsIn($measure));
      if( $marker ) {
         global $$marker;
         $$marker = $val;
      }
      return($val);
   }
   
   function dateMake( $vals ) {
      // takes an array of date values and returns 
      // a unix time from them
      // incoming array values are:
      // int hour, int minute, int second, int month, int day, int year [, int is_dst])
      //   [0] - hour
      //   [1] - minute
      //   [2] - second
      //   [3] - month
      //   [4] - day
      //   [5] - year
      //   [6] - is daylight savings time? [optional]
      
      if( $vals[6] && eregi("p", $vals[6]) )
	$vals[3] += 12;
      
      $date = mktime($vals[3], $vals[4], $vals[5], $vals[1], $vals[2], $vals[0]);
      return($date);
   }
   
   function dateParse( $ctime = '' ) {
      // takes a date input as "yy-mm-dd[ hh:mm[:ss] [am/pm]]"
      // or as "mm/dd/yy[ hh:mm[:ss] [am/pm]]"
      // and returns a unix time for the date
      // so that it can be used by the zenDate class
      // for advanced manipulations
      
      if( !$ctime )
	return( $this->currTime );
      else {
	 $dt_parts = explode(" ", $ctime);
	 if( eregi("-", $dt_parts[0]) )
	   list($date_parts[2], $date_parts[0], $date_parts[1]) = explode("-", $dt_parts[0]);
	 else
	   $date_parts = explode("/", $dt_parts[0]);
	 if( $dt_parts[1] )
	   $time_parts = explode(":", $dt_parts[1]);
	 
	 if( $dt_parts[2] && eregi("p", $dt_parts[2]) && $time_parts[0] != 12 )
	   $time_parts[0] += 12;
	 else if( $dt_parts[2] && eregi("a", $dt_parts[2]) && $time_parts[0] == 12 )
	   $time_parts[0] = 0;
	 
	 if( strlen($date_parts[2]) == 2 )
	   $date_parts[2] += 2000;
	 
	 $dateParts = array(
			    $date_parts[2],
			    $date_parts[0],
			    $date_parts[1],
			    $time_parts[0],
			    $time_parts[1],
			    $time_parts[2]
			    );
	 $utime = $this->dateMake($dateParts);
	 return( $utime );
      }
   }
   
   function dateSplit($utime = '') {
      // returns an indexed array of values 
      // from utime as follows:
      //   "seconds" - seconds	       
      //   "minutes" - minutes 			 
      //   "hours" - hours 				 
      //   "mday" - day of the month 				  
      //   "wday" - day of the week, numeric : from 0 as Sunday up to 6 as Saturday
      //   "mon" - month, numeric 					       
      //   "year" - year, numeric 						      
      //   "yday" - day of the year, numeric; i.e. "299"
      //   "weekday" - day of the week, textual, full; i.e. "Friday"
      //   "month" - month, textual, full; i.e. "January"
      
      if( !$utime )
	$utime = $this->currTime;
      return( getdate($utime) );
   }

   function dateAdjust( $adj, $period = '', $date = '' ) {
      // takes a unix timestamp and adds
      // $adj (integer) units of $period
      // (which will be 'seconds', 'minutes', 'hours', etc)
      // to it
      
      if( $date == '' )
	$date = $this->currTime;

      $dateParts = $this->dateSplit($date);
      $year = $dateParts["year"];
      $month = $dateParts["mon"];
      $day = $dateParts["mday"];
      $hour = $dateParts["hours"];
      $min = $dateParts["minutes"];
      $sec = $dateParts["seconds"];
      
      $period = strtolower(substr($period, 0, 2));
      switch( $period ) {
       case "da":
	 $day += $adj;
	 break;
       case "we":
	 $day += $adj * 7;
	 break;
       case "mo":
	 $month += $adj;
	 break;
       case "ye":
	 $year += $adj;
	 break;
       case "de":
	 $year += $adj * 10;
	 break;
       case "ce":
	 $year += $adj * 100;
	 break;
       case "qu":
	 $month += $adj * 3;
	 break;
       case "ho":
	 $hour += $adj;
	 break;
       case "mi":
	 $min += $adj;
	 break;
       default:
	 $sec += $adj;
	 break;
      }
      
      $dateParts = array( $year, $month, $day, $hour, $min, $sec );
      $newtime = $this->dateMake($dateParts);
      return($newtime);
   }
   
   function dateAnchor( $period = 'month', $date = '', $end = '' ) {
      // looks at the current date and determines
      // the timestamp representing the start of the
      // current period (month, day, year, hour, etc)
      // if $end is given, then it anchors this item to 
      // the first instance of the next period (hour, month, day, etc)
      // after the current one (i.e. just greater than the end!)
      
      if( !$date )
	$date = $this->currTime;
      
      $dateParts = $this->dateSplit($date);
      $year = $dateParts["year"];
      $month = $dateParts["mon"];
      $day = $dateParts["mday"];
      $hour = $dateParts["hours"];
      $min = $dateParts["minutes"];
      $sec = $dateParts["seconds"];
      
      $period = (eregi("^(m|d)", $period))? strtolower(substr($period, 0, 2)) : strtolower(substr($period, 0, 1));
      switch($period) {
       case "c":
	 if( $end )
	   $year += 100;
	 $year = $year - substr($year, 2, 2);
	 $month = $day = 1;
	 $hour = $min = $sec = 0;
	 break;
       case "de":
	 if( $end )
	   $year += 10;
	 $year = $year - substr($year, 3, 1);
	 $month = $day = 1;
	 $hour = $min = $sec = 0;
	 break;
       case "y":
	 if( $end )
	   $year++;
	 $month = $day = 1;
	 $hour = $min = $sec = 0;
	 break;
       case "q":
	 if( $end )
	   $month += 3;
	 $month = $month - floor( $month / 4 ) + 1 ;
	 $day = 1;
	 $hour = $min = $sec = 0;
	 break;
       case "mo":
	 if( $end )
	   $month++;
	 $day = 1;
	 $hour = $min = $sec = 0;
	 break;
       case "w":
	 if( $end )
	   $week++;
	 $wday = $dateParts["wday"];
	 $day = $day - $wday + 1;
	 $hour = $min = $sec = 0;
	 break;
       case "da":
	 if( $end )
	   $day++;
	 $hour = $min = $sec = 0;
	 break;
       case "h":
	 if( $end )
	   $hour++;
	 $min = $sec = 0;
	 break;
       case "mi":
	 if( $end )
	   $min++;
	 $sec = 0;
	 break;
      }
      $dateParts = array( $year, $month, $day, $hour, $min, $sec );
      return( $this->dateMake($dateParts) );
   }
   
   function dateSQL( $date = '' ) {
      // creates an SQL date for insertion 
      // into an SQL database as yyyy-mm-dd format
      
      if( !$date )
	$date = $this->currTime;
      $dateParts = $this->dateSplit( $date );
      extract($dateParts);
      $date = "$year-$mon-$mday";
      return($date);
   }
   
   function dateTimeSQL( $date = '' ) {
      // constructs an SQL date and time for use
      // in SQL database as yyyy-mm-dd hh:mm:ss
      // using 4 digit year and military time(24 hour notation)
      
      if( !$date )
	$date = $this->currTime;
      $dateParts = $this->dateSplit( $date );
      extract($dateParts);
      $date = "$year-$mon-$mday $hours:$minutes:$seconds";
      return($date);
   }
   
   function dateIsMultiple( $frequency, $start, $date = '', $range = "day" ) {
      // THIS FUNCTION IS STILL EXPERIMENTAL AND HAS NOT BEEN
      // THOROUGHLY TESTED YET
      // 
      // this function checks to see if
      // $date is a multiple of $start
      // using the frequency given (i.e. every "2 months")
      // matching anything that falls within 
      // $range (i.e. a day of $date)
      // $frequency is a number followed by a space followed
      // by an interval ("x [months|days|years|hours]")
      // and $range is the lenght of allowed variance (1 hour, 1 day, 1 week, etc)
     
      if( !$start )
	$start = $this->currTime;
      if( $range ) {
	 $date = $this->dateAnchor($range, $date);
	 $start = $this->dateAnchor($range, $start);
      }
      $parts = explode(" ", $frequency);
      $startParts = $this->dateSplit( $start );
      $dateParts = $this->dateSplit( $date );		
      switch( strtolower(substr($parts[1], 0, 2)) ) {
       case "se":
	 $res = ($dateParts["seconds"] - $startParts["seconds"]) % $parts[0];
	 break;
       case "mi":
	 $res = ($dateParts["minutes"] - $startParts["minutes"]) % $parts[0];
	 break;
       case "ho":
	 $res = ($dateParts["hours"] - $startParts["hours"]) % $parts[0];
	 break;
       case "da":
	 $ydiff = $dateParts["year"] - $startParts["year"];
	 $res = ($dateParts["yday"] - $startParts["yday"] + 365 * $ydiff) % $parts[0];
	 break;
       case "we":
	 $ydiff = $dateParts["year"] = $startParts["year"];
	 $res = ($dateParts["yday"] - $startParts["yday"] + 365 * $ydiff) % ($parts[0] * 7);
	 break;
       case "mo":
	 $res = ($dateParts["mon"] - $startParts["mon"]) % $parts[0];
	 break;
       case "qu":
	 $res = ($dateParts["mon"] - $startParts["mon"]) % ($parts[0] * 3);
	 break;
       case "ye":
	 $res = ($dateParts["year"] - $startParts["year"]) % $parts[0];
	 break;
       case "de":
	 $res = ($dateParts["year"] - $startParts["year"]) % ($parts[0] * 10);
	 break;
       case "ce":
	 $res = ($dateParts["year"] - $startParts["year"]) % ($parts[0] * 100);
	 break;
      }
      if( $res ) {
	 return;
      } else {
	 return(1);
      }
   }
   
   function zenDate( $currTime = '' ) {
      // invokes the zenDate class
      // prepares some default values
      
      $this->nowParts = getdate(time());
      $this->now = time();
      if( $currTime )
         $this->currTime = $currTime;
      else
         $this->currTime = $this->now;
   }
     
}

?>
