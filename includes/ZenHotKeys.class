<? if( !ZT_DEFINED ) { die("Illegal Access"); }

class ZenHotKeys {
  
  function ZenHotKeys( &$zen ) {
    $this->_zen =& $zen;
    $this->_keys = array();
    $this->_fxns = array();
    $this->_idx = array();
    $this->_tabs = array();
    $this->_lh = '';
    $this->_alreadyLoaded = array();
    
    //todo load registered hot keys from database for the 'all' section
    //todo and assign them here
    $this->assign('ALT+1', 'Projects',    "KeyEvent.createLoadUrl('{rootUrl}/projects.php')", '', true);
    $this->assign('ALT+2', 'Tickets',     "KeyEvent.createLoadUrl('{rootUrl}/index.php')", '', true);
    $this->assign('ALT+3', 'Contacts',    "KeyEvent.createLoadUrl('{rootUrl}/contacts.php')", '', true);
    $this->assign('ALT+4', 'Options',     "KeyEvent.createLoadUrl('{rootUrl}/options.php')", '', true);  
    $this->assign('ALT+5', 'Help',        "KeyEvent.createLoadUrl('{rootUrl}/help/index.php')", '', true);  
    $this->assign('ALT+6', 'Admin',       "KeyEvent.createLoadUrl('{rootUrl}/admin/index.php')", '', true);  
    $this->assign('ALT+P', 'New Project', "KeyEvent.createLoadUrl('{rootUrl}/newProject.php')", '', true);  
    $this->assign('ALT+T', 'New Ticket',  "KeyEvent.createLoadUrl('{rootUrl}/newTicket.php')", '', true);  
    $this->assign('ALT+C', 'New Contact', "KeyEvent.createLoadUrl('{rootUrl}/newContact.php')", '', true);
    
    $this->newFxn('quickFocus', 'window.document.quickIdForm.idText.focus(); quickHighlight("window.document.quickIdForm.idText","searchHelpBox");', '', true);
    $this->assign('ALT+S', 'Search',   "quickFocus()", 'Enter a ticket id or summary', true);
    $this->assign('ALT+V', 'Advanced Search', "KeyEvent.createLoadUrl('{rootUrl}/search.php')", "Advanced ticket search", true);
  }
  
  /** Prepares hot keys for a given section of the app */
  function loadSection( $sect ) {
    $sect = strtolower($sect);
    if( in_array($sect, $this->_alreadyLoaded) ) {
      $this->_zen->addDebug('loadSection', "$sect already loaded", 3);
      return;
    }
    //todo load registered hot keys from database and assign here
    $this->_zen->addDebug('loadSection', "Attempting to load section: $sect", 3);
    
    //this is a quick hack for the time being
    if( $sect == 'admin' ) {
      $this->assign('ALT+N',  'New User',        "KeyEvent.createLoadUrl('{rootUrl}/admin/addUser.php')");
      $this->assign('ALT+U',  'Edit Users',      "KeyEvent.createLoadUrl('{rootUrl}/admin/listUsers.php')");
      $this->assign('ALT+E',  'Edit Tickets',    "KeyEvent.createLoadUrl('{rootUrl}/admin/editTicket.php')");
      $this->assign('ALT+F',  'Edit Field Map',  "KeyEvent.createLoadUrl('{rootUrl}/admin/fieldMap.php')");
      $this->assign('ALT+B',  'Bins',            "KeyEvent.createLoadUrl('{rootUrl}/admin/bins.php')");
      $this->assign('ALT+R',  'Priorities',      "KeyEvent.createLoadUrl('{rootUrl}/admin/priorities.php')");
      $this->assign('ALT+S',  'Systems',         "KeyEvent.createLoadUrl('{rootUrl}/admin/systems.php')");
      $this->assign('ALT+A',  'Tasks',           "KeyEvent.createLoadUrl('{rootUrl}/admin/tasks.php')");
      $this->assign('ALT+Y',  'Types',           "KeyEvent.createLoadUrl('{rootUrl}/admin/types.php')");
      $this->assign('ALT+G',  'Data Groups',     "KeyEvent.createLoadUrl('{rootUrl}/admin/groups.php')");
      $this->assign('ALT+H',  'Behaviors',       "KeyEvent.createLoadUrl('{rootUrl}/admin/behaviors.php')");
      $this->assign('ALT+O',  'Configuration',   "KeyEvent.createLoadUrl('{rootUrl}/admin/config.php')");
    }
    else if( $sect == 'actionbar' ) {
      $actions = $this->_zen->getActions();
      foreach($actions as $k=>$v) {
        if( $v['button'] && $v['key'] ) {
          if( $k == 'print' ) {
            $this->assign("CTRL+SHIFT+{$v['key']}", "Action: {$v['label']}", "printWindow");
            continue;
          }
          $this->assign("CTRL+SHIFT+{$v['key']}", "Action: {$v['label']}", 
            "KeyEvent.createLoadUrl('{rootUrl}/actions/$k.php?id={id}')", $v['label']);
        }
      }
    }
    else if( $sect == 'action_approve' ) {
      $f = "window.document.forms['approveForm']";
      $this->assign('ALT+O', "Comments", "{$f}.elements['comments'].select()");
      $this->assign('ALT+A', "Approve", "{$f}.submit()");
    }
    else if( $sect == 'action_assign' ) {
      $f = "window.document.forms['assignForm']";
      $this->assign('ALT+R', "Recipient", "{$f}.elements['user_id'].focus()");
      $this->assign('ALT+I', "Comments or Instructions", "{$f}.elements['comments'].select()");
      $this->assign('ALT+A', "Assign", "{$f}.submit()");
    }
    else if( $sect == 'action_close' ) {
      $this->assign('ALT+H', 'Field: hours', "window.document.forms['ticketTabForm'].elements['hours'].select()", "Hours");
      $this->assign('ALT+O', 'Field: comments', "window.document.forms['ticketTabForm'].elements['comments'].select()", "Comments");
      $this->assign('ALT+L', 'Close', "window.document.forms['ticketTabForm'].submit()");
    }
    else if( $sect == 'action_contacts' ) {
      $this->assign('ALT+N', 'Create New Contact', "window.document.forms['newContactForm'].submit()");
      $this->assign('ALT+O', 'Add Contact', "window.document.forms['ContactsAddForm'].submit()");
      $this->assign('ALT+Y', 'Field: company_id', "window.document.forms['ContactsAddForm'].elements['company_id'].focus()", "Company");
      $this->assign('ALT+E', 'Field: person_id', "window.document.forms['ContactsAddForm'].elements['person_id'].focus()", "Person");
    }
    else if( $sect == 'action_email' ) {
      $f = "window.document.forms['emailForm']";
      $this->newFxn('emailFormToggle', "var obj = {$f}.elements['method']; var newVal = arguments[0]; for(var i=0; i < obj.length; i++) { if( obj[i].value == newVal ) { obj[i].checked = true; break; } }");
      $this->assign('ALT+U', 'Select a User', "{$f}.elements['users_to_email[]'].focus();",
        "Select one or more users, use CTRL or SHIFT key for multiples");
      $this->assign('ALT+M', 'Manually Enter Addresses', "{$f}.elements['custom_email_addresses'].select();",
        "Manually enter an email address, use commas to separate multiple addresses");
      $this->assign('ALT+O', 'Comments or Instructions', "{$f}.elements['comments'].select()");
      $this->assign('ALT+E', 'Send Email', "{$f}.submit()");
      $this->assign('ALT+L', 'send option: link',  "emailFormToggle(1)");
      $this->assign('ALT+Y', 'send option: summary', "emailFormToggle(2)");
      $this->assign('ALT+A', 'send option: log',  "emailFormToggle(3)");
    }
    else if( $sect == 'action_move' ) {
      $f = "window.document.forms['moveForm']";
      $this->assign('ALT+B',  'New Bin', "{$f}.elements['newBin'].focus()");
      $this->assign('ALT+O',  'Comments', "{$f}.elements['comments'].select()");
      $this->assign('ALT+M',  'Move',  "alert(arguments[0]+','+window.event+','+event);{$f}.submit()");
    }
    else if( $sect == 'action_reject' ) {
      $f = "window.document.forms['rejectForm']";
      $this->assign('ALT+N', 'Reason', "{$f}.elements['comments'].select()");
      $this->assign('ALT+R', 'Reject', "{$f}.submit()");
    }
    else if( $sect == 'action_reopen' ) {
      $f = "window.document.forms['reopenForm']";
      $this->assign('ALT+I', 'Comments or Instructions', "{$f}.elements['comments'].select()");
      $this->assign('ALT+R', 'Reopen', "{$f}.submit()");
    }
    else if( $sect == 'action_test' ) {
      $f = "window.document.forms['testForm']";
      $this->assign('ALT+H', 'Hours Worked', "{$f}.elements['hours'].select()");
      $this->assign('ALT+I', 'Comments or Instructions', "{$f}.elements['comments'].select()");
      $this->assign('ALT+E', 'Testing Complete', "{$f}.submit()");
    }
    else if( $sect == 'action_yank' ) {
      $this->assign('ALT+R', 'Reason', "window.document.forms['pullForm'].elements['comments'].select()");
      $this->assign('ALT+U', 'Pull', "window.document.forms['pullForm'].submit()");
    }
    else if( $sect == 'contacts' ) {
      $this->assign('ALT+D',  'Find',           "KeyEvent.createLoadUrl('{rootUrl}/searchContacts.php')");
      $this->assign('ALT+B',  'Browse',         "KeyEvent.createLoadUrl('{rootUrl}/agreements.php')");
      $this->assign('ALT+A',  'New Agreement',  "KeyEvent.createLoadUrl('{rootUrl}/newAgreement.php')");
    }
    else if( $sect == 'contacts_new_menu' ) {
      $this->assign('ALT+Y',  'New Company',    "KeyEvent.createLoadUrl('{rootUrl}/newContact.php?mode2=1')");
      $this->assign('ALT+N',  'New Person',     "KeyEvent.createLoadUrl('{rootUrl}/newContact.php?mode2=2')");
    }
    else if( $sect == 'log' ) {
      $this->assign('ALT+L',  'Show All Logs',  "window.document.getElementById('systemLogFilterCheckbox').click()");
    }
    else if( $sect == 'login' ) {
      $f = "window.document.forms['loginForm']";
      $this->newFxn("loginAutoCheck", "{$f}.elements['save_my_password'].checked = !window.document.forms['loginForm'].elements['save_my_password'].checked;");
      $this->assign('ALT+L',   'Log On',         "{$f}.submit()");
      $this->assign('ALT+A',   "In the future, log me in automatically (using a cookie)", "loginAutoCheck()");
      $this->assign('ALT+N',   'Login Name',     "{$f}.elements['username'].select()");
      $this->assign('ALT+W',   'Password',       "{$f}.elements['passphrase'].select()");
    }
    else if( $sect == 'options' ) {
      $this->assign('ALT+L',  'Log Off',        "KeyEvent.createLoadUrl('{rootUrl}/index.php?logoff=1')", "Log out of ".$this->_zen->getSetting('system_name'));
    }
    else if( $sect == 'ticket_fields_editable' ) {
      $this->assign('ALT+A', 'Save', "window.document.forms['ticketTabForm'].submit()");
    }
    else if( $sect == 'ticket_view' || $sect == 'project_view' ) {
      $map = $GLOBALS['zt_map'];
      preg_match('@(ticket|project)@', $sect, $matches);
      $t = $matches[1];
      for($i=1; $i<=8; $i++) {
        $view = "{$t}_tab_{$i}";
        $label = $map->getViewProp($view,'label');
        $this->assign("ALT+SHIFT+$i", $label, "KeyEvent.createLoadUrl('{rootUrl}/ticket.php?id={id}&setmode=$view')");
      }
    }
  }
  
  function newFxn( $name, $code ) {
    if( array_key_exists($name, $this->_fxns) ) {
      $this->_zen->addDebug('ZenHotKeys->newFxn', "The fxn '$name' already exists", 1);
      return;
    }
    $this->_zen->addDebug('ZenHotKeys->assign', "Added fxn '$name'", 3);
    $this->_fxns["$name"] = $code;
  }

  /** 
   * Adds a hot key to the list.  The fxn param accepts the following special
   * placeholders:
   * <ul>
   *  <li>{rootUrl} - replaced with the value of $rootUrl in www/header.php
   *  <li>{id} - replaced with the current ticket/project/contact/agreement id (if any)
   * </ul>
   *
   * @param String $key a hot key such as 'ALT+SHIFT+Y'
   * @param String $label name of the hot key
   * @param String $fxn name of function to call when hot key is pressed
   * @param String $description tooltip text (defaults to label)
   */
  function assign( $key, $label, $fxn, $description = '', $global = false ) {
    global $id; global $rootUrl;
    
    $key = strtoupper($key);
    if( array_key_exists($key, $this->_keys) ) {
      $this->_zen->addDebug('ZenHotKeys->assign', "The key '$key' already exists", 1);
      return;
    }

    if( array_key_exists($label, $this->_idx) ) {
      $this->_zen->addDebug('ZenHotKeys->assign', "The label '$label' already exists for key '".$this->_idx["$label"]."', this hotkey cannot be looked up by label accurately", 2);
    }
    else {
      $this->_idx["$label"] = $key;
    }
    
    if( !$description ) { $description = $label; }
    $fxn = str_replace("{rootUrl}", $rootUrl, $fxn);
    $fxn = str_replace("{id}", $id, $fxn);
    
    $this->_zen->addDebug('ZenHotKeys->assign', "Added key '$key' for label '$label' and fxn '$fxn'", 3);
    $this->_keys["$key"] = array('label'=>$label, 'fxn'=>$fxn, 'description'=>$description, 'global'=>$global);
  }
  
  function disableAction( $key ) {
    $this->_keys["$key"]["fxn"] = 'doNothing';
  }
  
  /**
   * Return the hot key for a given label (the section must be loaded unless
   * this label appears in 'all')
   *
   * @param String $label
   * @return String the key for this label
   */
  function find( $label ) {
    if( !array_key_exists("$label", $this->_idx) ) { return false; }
    return $this->_idx["$label"];
  }
  
  
  /** Returns a tooltip for a given label */
  function tt( $label ) {
    $key = $this->find($label);
    if( !$key ) {
      $this->_zen->addDebug('ZenHotKeys->tt', "Invalid label '$label'", 1);
      return $label;
    }
    return $this->tooltip($key, $override_text = '');
  }
  
  /** Returns a parsed/translated label for a given label */
  function ll( $label, $override_text = '' ) {
    $key = $this->find($label);
    if( !$key ) {
      $this->_zen->addDebug('ZenHotKeys->ll', "Invalid label '$label'", 1);
      return $override_text? $override_text : $label;
    }
    return $this->label($key, $override_text);
  }
  
  /** 
   * Return a tooltip message for a given key, this will be translated and
   * the hot key will be appended
   */
  function tooltip( $key ) {
    $key = strtoupper($key);
    return $this->_zen->ffv(tr($this->_keys["$key"]["description"])." ($key)");
  }
  
  /**
   * Return description for a given key, translated and escaped
   *
   * If the description is the same as the label, it will be skipped.
   */
  function description( $key ) {
    $key = strtoupper($key);
    $x = $this->_keys["$key"];
    if( $x["description"] == $x["label"] ) { return "&nbsp;"; }
    return $this->_zen->ffv(tr($x["description"]));
  }
  
  /** 
   * Return a label for a given key, this will be translated
   * and the hot key will be underlined if possible
   */
  function label( $key, $override_text = '', $supress_sup = false ) {
    $key = strtoupper($key);
    $char = $this->_getChar($key);
    $lchar = strtolower($char);
    $label = $override_text? tr($override_text) : tr($this->_keys["$key"]["label"]);
    $label = preg_replace('@^(Action|Field): @', '', $label);
    $label = str_replace('_', ' ', $label);
    $pos = strpos($label, $char);
    if( $pos === false ) { $pos = strpos($label, $lchar); $char = $lchar; }
    $len = strlen($label);
    if( $pos === 0 || $len == 0) {
      // matched at beginning of string
      $txt = "<u>{$char}</u>".substr($label,1);
    }
    else if( $pos > 0 && $pos == $len-1 ) {
      // matched at end of string
      $txt = substr($label,0,$len-1)."<u>{$char}</u>";
    }
    else if( $pos > 0 ) {
      // matched inside the string
      $txt = substr($label,0,$pos)."<u>{$char}</u>".substr($label,$pos+1);
    }
    else {
      // no match, just return the label
      //return $label."<sub class='note'>$char</sub>";
      $txt = $label;
    }
    return $txt . ($supress_sup? '' : $this->addZenTab($key));
  }
  
  /**
   * Renders any custom functions defined here.
   */
  function renderFunctions() {
    if( !count($this->_fxns) ) { return; }
    foreach( $this->_fxns as $k=>$v ) {
      print "function $k() {\n";
      print $v;
      print "}\n\n";
    }
     
  }
  
  /** 
   * Create javascript code needed for
   * hot keys to function.  Depends on the keyevents.js file
   *
   * This is meant to be used inside of the onload fxn for the page.   */
  function renderKeys() {
    if( !count($this->_keys) ) { return; }
    foreach( $this->_keys as $k=>$v ) {
      if( $this->_getAccessKey($k) ) { continue; }
      $f = $v['fxn'];
      print "\tKeyEvent.register($f, '$k');\n";
    }
    foreach( $this->_tabs as $t=>$x ) {
      print "\tZenTabs.singleton.register('keySub_$t');\n";
    }
  }
  
  /**
   * create javascript code needed for
   * accesskey functions
   */
  function renderAccessKeys() {
    $keys = array();
    foreach($this->_keys as $k=>$v) {
      if( $key = $this->_getAccessKey($k) ) {
        $keys["$k"] = $v;
        $keys["$k"]['accesskey'] = $key;
      }
    }
    if( !count($keys) ) { return; }
    //print "<form>";
    foreach($keys as $k=>$v) {
      $fxn_parsed = str_replace('<', '&lt;', str_replace('>', '&gt;', str_replace('"', '&quot;', $v['fxn'])));
      $fxn_parsed = str_replace('KeyEvent.createLoadUrl', 'KeyEvent.loadUrl', $fxn_parsed);
      print "<input type='button' name='accessKeyButton{$v['accesskey']}' value='' accesskey='{$v['accesskey']}' class='accesskeys' onclick=\"$fxn_parsed\">";
    }
    //print "</form>";
  }
  
  /** Returns letter used to access this key if it is an accesskey */
  function _getAccessKey( $key ) {
    preg_match('@^ALT[+](\w)$@', $key, $matches);
    return count($matches)>1? $matches[1] : false;
  }
  
  /** Splits a key and returns the letter to be used */
  function _getChar( $key ) {
    return preg_replace('@^.*[+]@', '', $key);
  }
  
  function getChar( $key ) {
    return $this->_getChar($key);
  }
  
  /** Creates html output to display help info */
  function renderHelp() {
    print "<table width='300' border='0' cellspacing='1' cellpadding='2'><tr><td class='titleCell'>Hot Key</td><td class='titleCell'>Function</td></tr>";
    foreach( $this->_keys as $k=>$v ) {
      print "<tr><td class='hotKeyCell'>$k</td><td class='hotKeyCell'>"
        .$this->label($k)."</td></tr>";
    }
    print "</table>\n";
  }
  
  /** Store a key that will be used to display subtext on tabs */
  function addZenTab( $key ) {
    if( !array_key_exists($key,$this->_tabs) ) {
      $this->_tabs[$key] = 1;
    }
    $this->_lh = $this->_lh == 'High'? 'Low' : 'High';
    return "<div id='keySub_$key' class='keySub{$this->_lh}'>$key</div>";
  }
  
  function addZenTabByLabel($label) {
    $this->addZenTab($this->find($label));
  }
  
  var $_lh;
  var $_fxns;
  var $_zen;
  var $_keys;
  var $_idx;
  var $_alreadyLoaded;
  var $_tabs;
}

?>