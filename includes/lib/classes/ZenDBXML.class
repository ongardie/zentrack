<? /* -*- Mode: C; c-basic-indent: 3; indent-tabs-mode: nil -*- ex: set tabstop=3 expandtab: */ 

/** 
 * Converts databases schemas to xml, and xml to db schemas
 *
 * @package zen 
 */

class ZenDBXML {

  /**
   * CONSTRUCTOR - prepare proper db specific functions
   *
   * @param string $dbobject is a ZenDatabase instance
   */
  function ZenDBXML( &$dbobject ) { 
    $this->_db =& $dbobject;
  }


  /* USEFUL METHODS */

  /**
   * creates xml data from the provided database
   *
   * this is accomplished by creating a root ZenXNode object, then
   * populating it with the database information... upon completion
   * ZenXNode::toXML() will create the output xml text
   *
   * @return string xml data ready for writing or parsing
   */
  function convertSchemaToXML() { }

  /**
   * creates a db schema from an xml file
   *
   * @param string $filename containing xml data
   * @return array of sql statements to create the db
   */
  function createSqlFromXML() { }

  /**
   * compares xml file to the current db and creates sql needed to alter db to match xml file
   *
   * @param string $filename the xml data
   * @return array of sql statements to update db
   */
  function updateSqlFromXML() { }

  /* UTILITIES */

  /**
   * creates sql needed to drop a table
   *
   * @param string $table
   * @return array of sql statements
   */
  function _dropTableSyntax( $table ) { }

  /**
   * creates sql needed to add a table
   *
   * @params string $table
   * @return array of sql statements
   */
  function _addTableSyntax( $table ) { }

  /**
   * creates sql needed to drop a column
   *
   * @param string $table
   * @param string $column
   * @return array of sql statements
   * @return array of sql statements
   */
  function _dropColumnSyntax( $table, $column ) { }

  /**
   * creates sql needed to add a column
   *
   * @param string $table
   * @param string $name of column
   * @param string $type data type
   * @param string $unique (true or false)
   * @param integer $length (if applicable) of column
   * @param string $formtype field type in a form
   * @param string $description description of column
   * @param string $required (true or false)
   * @return array of sql statements
   */
  function _addColumnSyntax( $table, $name, $type, $unique, $length, $formtype, $description, $required ) { }

  /**
   * creates an index on a table for various columns
   *
   * @param string $name name of the index
   * @param string $table
   * @param array $columns
   * @param boolean $unique
   * @return array of sql statements
   */
  function _addIndexSyntax( $name, $table, $columns, $unique = false ) { }

  /**
   * drops an index on a table
   *
   * @param string $table
   * @param string $name name of the index
   */
  function _dropIndexSyntax( $table, $name ) { }

  /* VARIABLES */

  /** @var ZenDatabase $_dbobj a db connection to use (also provides db type, specs, etc) */
  var $_dbobj;

  /** @var DbConverter $_dbc a DbConverter* object specific to the database type */
  var $_dbc;

}

?>
