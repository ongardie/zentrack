<? /* -*- Mode: C; c-basic-indent: 3; indent-tabs-mode: nil -*- ex: set tabstop=3 expandtab: */ 

/** @package zen */

class Zen {

  /**
   * CONSTRUCTOR: constructs common vars and objects
   * 
   * This method relies on the global array: $_GLOBALS['zen']
   * which is created in header.php in the www/ directory.
   *
   * This method should be invoked by all child constructors
   * This should set up the following vars, pulled from the
   * config.ini file:
   * <ul>
   *    <li>libDir: the includes directory
   *    <li>templateDir: the templates directory
   *    <li>logDir: the log directory
   *    <li>cacheDir: the directory for db cacheing
   *    <li>Db_Type
   *    <li>Db_Login
   *    <li>Db_Pass
   *    <li>Db_Host
   *    <li>Db_Instance
   * </ul>
   */
  function Zen() { }

  /**********************************
   * STATIC METHODS (prevent multiple objects when possible, rely on static page array $loaded_data) 
   *
   * These static methods should be written in a manner that will allow them to be called via
   * the approach Zen::getSetting($cat,$name) ... etc
   *********************************/

  /**
   * returns a system setting
   *
   * this method will return a system setting... some sort of static/global setup
   * would be best to invoke here, to avoid redundant calls
   *
   * @param string $cat is the category for the setting (tickets, 
   * @param string $name of the setting
   * @return string value of the setting or null if it isn't found
   */
  function getSetting($cat, $name) { }

  /**
   * loads system settings into memory
   *
   * This method should employ a static list from the GLOBAL settings to avoid
   * redundant calls to this
   *
   * @param string $cat is the category (common should be loaded on construction)
   */
  function _loadSettings() { }

  /**
   * returns a db connection / database object
   *
   * THIS SHOULD BE STATIC, only one db connection is necessary
   *
   * @return object databaseObject
   */
  function getDbConnection() { }

  /**
   * returns a ZenMessageList of system messages matching criteria
   *
   * this method should use a GLOBAL array to maintain a single list
   * for all of the results
   *
   * @param string $class returns only errors from this class
   * @param string $method return only errors from this method
   * @return ZenMessageList object containing valid system messages
   * @see ZenMessageList
   */
  function getDebug( $class = '', $method = '' ) { }

  /**
   * stores a message in the ZenMessageList
   *
   * @param mixed $class the class object ($this) or a string representing the class/script name
   * @param string $method the method/section producing message
   * @param string $message the message to store
   * @param integer $level the level of the message
   * @param intege $errnum the error number associated with message
   */
  function debug( $class, $method, $message, $level = 3, $errnum = null ) { }

  /**
   * retrieves a ticket object, these are cached for life of the page
   *
   * @param integer $ticket_id
   * @return ZenTicket object or false
   */
  function getTicket( $ticket_id ) { }

  /**
   * retrieves a user object, these are cached for life of the page
   *
   * @param integer $user_id
   * @return ZenUser object or false
   */
  function getUser( $user_id ) { }

  /*************************
   * DATA CLASS UTILS
   ************************/

  /**
   * Takes a data type and returns the primary key of that table field
   *
   * This method will validate the class type using is_a to see if it is a valid ZenList
   * or ZenBase child (extends one of these)
   *
   * @param Object $class is an empty class object for validation
   * @return string the name of the primary key column
   */
  function getPrimaryKey( $class ) {
    $n = preg_replace("/^Zen/", "", class_name($this->_childobj)) . "_id";
    return preg_replace("/List$/", "", $n);
  }


  /*********************************
   * UTILITIES 
   ********************************/

  /**
   * Creates a string in title case
   *
   * This will not capitalize articles or prepositions, and will retain acronyms and proper nouns
   * as specified by lists/ucwords and lists/lcwords
   *
   * @param string $string the string to capitalize
   * @return string the capitalized string
   */
  function titleCase( $string ) { }

  /**
   * Shows a date properly formatted according to the system settings
   *
   * @param integer $utime is a unix timestamp of date to show
   * @return string the formatted date string
   */
  function showDate( $utime = '' ) { }

  /**
   * Shows a long format date properly formatted according to the system settings
   *
   * @param integer $utime is a unix timestamp of date to show
   * @return string the formatted long date string
   */
  function showLongDate( $utime = '' ) { }

  /**
   * Shows a date and time properly formatted according to the system settings
   *
   * @param integer $utime is a unix timestamp of date to show
   * @return string the formatted date and time string
   */
  function showDateTime( $utime = '' ) { }

  /**
   * Shows a time properly formatted according to the system settings
   *
   * @param integer $utime is a unix timestamp of date to show
   * @return string the formatted time string
   */
  function showTime( $utime = '' ) { }

  /**
   * Parses a date into a unix timestamp (necessary since strtotime() is beginning to fall short here)
   *
   * @param string $date is the date to parse
   * @return integer unix timestamp representative of date
   */
  function parseDate( $date ) { }

  /**
   * Determines if a date lies on the interval of a date range
   *
   * @param integer $utime the unix timestamp to compare
   * @param integer $step the increment of our interval (every $step periods)
   * @param string $period is the period traversed (days,hours,weeks,months,years)
   * @param integer $base is any unix timestamp occuring on the desired interval
   * @return boolean is on the interval of the range given
   */
  function dateFallsOn( $utime, $step, $period, $base ) { }

   
  /********************************
   * VARIABLES 
   *******************************/
 
  /** @var array $_settings the system settings */
  var $_settings;

  /** @var array $_errorIndexByMethod contains an index of error objects by method */
  var $_errorIndexByMethod;
  
  /** @var array $_errorIndexByLevel contains an index of error objects by level */
  var $_errorIndexByLevel;
  
  /** @var array $_errors contains the error objects */
  var $_errors;

  /** @var array $_lcwords is a list of words that should be lower case in title structure */
  var $_lcwords;
 
  /** @var array $_ucwords is a list of words that should be upper case in title structure */
  var $_ucwords;

}

?>
