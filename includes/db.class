<?
  
include_once("$libDir/adodb/adodb.inc.php");
  
class DB {

   var $db_link;
   var $db_name;
   var $db_errnum;
   var $db_error;

   /*
   **  QUERIES
   */   
   
   function db_queryIndexed( $query ) {
      // retrieves an indexed array of results
      // from $query
      // stores any errors in $db_errnum(the code)
      // and $db_error(the message)

      $this->switchQueryMode(1);
      $recordSet = &$this->db_link->Execute($query);
      if( $recordSet ) {
	 $vars = $recordSet->getArray();
	 if( is_array($vars) && count($vars) > 0 )
	   return($vars);
      }
   }

   function db_query( $query ) {
      // returns an array of results
      // from $query
      $this->switchQueryMode(0);
      $recordSet = &$this->db_link->Execute($query);
      if( $recordSet ) {
	 $vars = $recordSet->getArray();
	 if( is_array($vars) && count($vars) > 0 )
	   return($vars);	 
      }
   }

   function db_quickIndexed( $query ) {
      // returns an indexed row (1 row only)
      // from $query
      
      $this->switchQueryMode(1);
      $recordSet = &$this->db_link->Execute($query);
      if( $recordSet ) {
	 $vars = $recordSet->fields;
	 if( is_array($vars) && count($vars) > 0 )
	   return($vars);	 
      }
   }

   function db_quick( $query ) {
      // returns a row (1 row only) of
      // results from $query
      
      $this->switchQueryMode(0);
      $recordSet = &$this->db_link->Execute($query);
      if( $recordSet ) {
	 $vars = $recordSet->fields;
	 if( is_array($vars) && count($vars) > 0 )
	   return($vars);	 	 
      }
   }
   
   function db_get( $query ) {
      // returns a single value from a db query

      $this->switchQueryMode(0);
      $recordSet = &$this->db_link->Execute($query);
      if( $recordSet ) {
	 return( $recordSet->fields[0] );
      }
   }
   
   function db_insert( $table, $params, $sequence = '' ) {
      // performs an insert statement
      // if $sequence is not given, then it will default as follows:
      //   [table]_id_seq
      // where ZENTRACK_TICKETS would result in:
      //   tickets_id_seq
      // all sequence ids should be named accordingly
      // 
      // requires abstraction because
      // returning the insert_id varies
      // in method from db to db
      // for instance:  in oracle or postgres
      // it is easiest to SELECT nextval() the 
      // sequence/trigger/etc and then insert 
      // the query with that value attached
      // so that the insertID can then be returned
      // .. in mysql, there is no SELECT nextval()
      // so it is easieast to run the query, then return
      // the mysql function mysql_insert_id()

      if( $this->database_type != 'mysql' ) {
	 if( !$sequence ) {
	    $sequence = ereg_replace("ZENTRACK_", "", $table);
	    $sequence .= "_id_seq";
	 }
	 $id = $this->db_insertID($sequence);
	 $fields = $this->db_get_fields($table);
	 $id_field = $fields[0];
	 $params["$id_field"] = $id;
      }      
      list($cols,$vals) = $this->makeInsertVals($params);
      $query = "INSERT INTO $table ($cols) VALUES($vals)";
      $res = $this->db_link->Execute($query);
      if( $res && $this->database_type == "mysql" ) {
	 $id = $this->db_insertID();
      }      
      if( $res ) {
	 return( $id );
      }
   }

   function db_result( $query ) {
      // performs an insert, update, delete
      // or other query which does not retrieve
      // data
      
      return( $this->db_link->Execute($query) );
   }

   function db_list( $query ) {
      // retrieves a single column from the db
      // and returns the results in a simple list
      // array
      
      $this->switchQueryMode(0);
      $recordSet = &$this->db_link->Execute($query);
      if( $recordSet ) {
	 $vars = $recordSet->getArray();
	 if( is_array($vars) && count($vars) > 0 ) {
	    foreach($vars as $v) {
	       $vals[] = $v[0];
	    }
	    return($vals);
	 }
      }
   }
   
   /*
   ** UTILITIES
   */
   
   function db_insertID($sequence = '') {
      // fetches the last mysql insert id from the db
      if( $this->database_type == 'mysql' ) {
	 return( mysql_insert_id() );
      } else {
	 return( $this->db_link->genID($sequence) );
      }
   }
   
   function checkSlashes( $val = '' ) {
      // checks incoming data for proper escaped ' marks
      // to insure insertion integrity
      $val = $this->db_link->qstr($val,get_magic_quotes_gpc());
      return $val;
   }   
   
   function makeInsertVals( $params, $set = 0 ) {
      // takes an indexed array of parameters and creates a list of columns
      // and values to insert into the database
      // is sensitive to things like NULL and numbers
      // if $set is 1, then this method will return an update formatted list
      // rather than two insert formatted lists
 
      if( !$set ) {
	 foreach($params as $k=>$v) {
	    $cols .= ($cols)? ", $k" : "$k";
	    if( ereg("^(NULL|FALSE|TRUE|[0-9]+)$", $v) ) {
	       $vals .= ($vals)? ", $v" : "$v"; 
	    } else {
	       $vals .= ($vals)? ", ".$this->checkSlashes($v) : $this->checkSlashes($v);
	    }
	 }
	 return(array($cols,$vals));
      } else {
	 foreach($params as $k=>$v) {
	    if( ereg("^(NULL|FALSE|TRUE|[0-9]+)$", $v) ) {
	       $vals .= ($vals)? ", $k = $v" : "$k = $v"; 
	    } else {
	       $vals .= ($vals)? ", $k = $v" : "$k = ".$this->checkSlashes($v);
	    }
	 }
	 return( $vals );
      }
   }
   
   function simpleWhere( $params ) {
      // takes an indexed array as a list of columns and
      // their values to match and makes them into an sql
      // format ready for use in a WHERE statement
     
      foreach($params as $k=>$v) {
	 if( $text )
	   $text .= " AND ";
	 if( is_array($v) ) {
	    $text .= "$k IN(";
	    $i = 0;
	    foreach($v as $vi) {
	       if( ereg("^(NULL|FALSE|TRUE|[0-9]+)$", $vi) ) {
		  $text .= ($i > 0)? ", ".$vi : $vi;
	       } else {
		  $text .= ($i > 0)? ", ".$this->checkSlashes($vi) : $this->checkSlashes($vi);
	       }
	       $i++;
	    }
	    $text .= ")";
	 } else {
	    if( ereg("^(NULL|FALSE|TRUE|[0-9]+)$", $v) ) {
	       $text .= "$k = $v";
	    } else {
	       $text .= "$k = ".$this->checkSlashes($v);
	    }
	 }
      }
      return($text);
   }
   
   function complexWhere( $params ) {
      // takes an indexed array as a list of columns and
      // an array containing the operator and value of each
      // to match and makes them into an sql
      // format ready for use in a WHERE statement
      // the format is ["column_name"] = array("operator","value")
      // where operator is a comparitor like =,>,>=,LIKE,etc
      foreach($params as $k=>$v) {
	 $v[1] = $this->checkSlashes($v[1]);
	 $text .= "$k $v[0] $v[1]";
      }
      return($text);
   }            
   
   function db_get_fields( $table, $flag = 0 ) {
      // returns the names of the columns
      // in $table of the current database
      // if $flag is set, returns the ADODB meta object
      // containing all parameters for the fields
      // (see ADODB method MetaColumns() for more info)
      // otherwise, just an array of names
      
      return( $this->db_link->MetaColumnNames($table) );
   }   
   
   function switchQueryMode($mode = 1) {
      global $ADODB_FETCH_MODE;
      // switches the return array method
      // 1 - associative array
      // 0 - non-associative array
      // mode is associative by default
      $ADODB_FETCH_MODE = ($mode)? ADODB_FETCH_ASSOC : ADODB_FETCH_NUM;
      return $ADODB_FETCH_MODE;
   }
   
   
   /*
   **  DB RELATED
   */
   
   function db_connect( $host = '', $user = '', $password = '', $database = '' ) {
      // create a db connection
      // see configVars.php for details on how to 
      // configure the db connection
      
      // connect
      $this->db_link->PConnect($host, $user, $password, $database);
      if( $database and $this->db_link ) {
	 $this->dbName = $database;
      }
      return( $this->db_link );      
   }

   /*
   **  INVOKE
   */
   
   function DB( $host = '', $user = '', $password = '', $database = '' ) {
      // call the zenDatabase class
      
      // create the object
      $this->db_link = &ADONewConnection($this->database_type);
      $ADODB_FETCH_MODE = ADODB_FETCH_ASSOC;      
      if( $this->database_type == 'oracle' || $this->database_type == 'oci8' ) {
	 putenv( "ORACLE_SID=".$this->database_instance); 
	 //oracle specific requirement
      }
      if( $this->sql_debug == "on" )
	$this->db_link->debug = true;
      $this->db_connect($host, $user, $password, $database);
   }
      
}

?>
